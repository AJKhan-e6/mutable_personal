/* vim: set filetype=cpp: */

M_FOLLOW( STATEMENT, ({ TK_EOF }))
M_FOLLOW( CREATE_DATABASE_STATEMENT, ({ TK_SEMICOL, TK_EOF }))
M_FOLLOW( USE_DATABASE_STATEMENT, ({ TK_SEMICOL, TK_EOF }))
M_FOLLOW( CREATE_TABLE_STATEMENT, ({ TK_SEMICOL, TK_EOF }))
M_FOLLOW( CONSTRAINT, ({ TK_Unique, TK_References, TK_Not, TK_Check, TK_Primary, TK_COMMA, TK_EOF, TK_RPAR }))
M_FOLLOW( SELECT_STATEMENT, ({ TK_SEMICOL, TK_RPAR, TK_EOF }))
M_FOLLOW( INSERT_STATEMENT, ({ TK_SEMICOL, TK_EOF }))
M_FOLLOW( TUPLE, ({ TK_SEMICOL, TK_COMMA, TK_EOF }))
M_FOLLOW( UPDATE_STATEMENT, ({ TK_SEMICOL, TK_EOF }))
M_FOLLOW( DELETE_STATEMENT, ({ TK_SEMICOL, TK_EOF }))
M_FOLLOW( IMPORT_STATEMENT, ({ TK_SEMICOL, TK_EOF }))
M_FOLLOW( SELECT_CLAUSE, ({ TK_Where, TK_EOF, TK_Group, TK_RPAR, TK_SEMICOL, TK_Having, TK_Order, TK_From, TK_Limit }))
M_FOLLOW( TABLE_OR_SELECT_STATEMENT, ({ TK_Where, TK_EOF, TK_Group, TK_RPAR, TK_SEMICOL, TK_Having, TK_Order, TK_COMMA, TK_Limit }))
M_FOLLOW( FROM_CLAUSE, ({ TK_SEMICOL, TK_Having, TK_Limit, TK_Where, TK_EOF, TK_Order, TK_Group, TK_RPAR }))
M_FOLLOW( WHERE_CLAUSE, ({ TK_SEMICOL, TK_Having, TK_Limit, TK_EOF, TK_Order, TK_Group, TK_RPAR }))
M_FOLLOW( GROUP_BY_CLAUSE, ({ TK_SEMICOL, TK_Having, TK_Limit, TK_EOF, TK_Order, TK_RPAR }))
M_FOLLOW( HAVING_CLAUSE, ({ TK_SEMICOL, TK_Limit, TK_EOF, TK_Order, TK_RPAR }))
M_FOLLOW( ORDER_BY_CLAUSE, ({ TK_SEMICOL, TK_RPAR, TK_Limit, TK_EOF }))
M_FOLLOW( LIMIT_CLAUSE, ({ TK_SEMICOL, TK_RPAR, TK_EOF }))
M_FOLLOW( UPDATE_CLAUSE, ({ TK_SEMICOL, TK_Where, TK_EOF }))
M_FOLLOW( DESIGNATOR, ({ TK_DATE, TK_EOF, TK_DATE_TIME, TK_False, TK_True, TK_DEC_FLOAT, TK_OCT_INT, TK_STRING_LITERAL, TK_DEC_INT, TK_HEX_INT, TK_HEX_FLOAT }))
M_FOLLOW( PRIMARY_EXPRESSION, ({ TK_EOF, TK_GREATER, TK_OCT_INT, TK_COMMA, TK_DATE, TK_IDENTIFIER, TK_PERCENT, TK_BANG_EQUAL, TK_GREATER_EQUAL, TK_DEC_FLOAT, TK_PLUS, TK_STRING_LITERAL, TK_DEC_INT, TK_As, TK_SLASH, TK_MINUS, TK_LESS_EQUAL, TK_ASTERISK, TK_Where, TK_LESS, TK_DATE_TIME, TK_False, TK_EQUAL, TK_SEMICOL, TK_Descending, TK_Or, TK_HEX_INT, TK_From, TK_HEX_FLOAT, TK_Ascending, TK_And, TK_LPAR, TK_Not, TK_Group, TK_True, TK_TILDE, TK_RPAR, TK_Having, TK_Order, TK_Limit }))
M_FOLLOW( POSTFIX_EXPRESSION, ({ TK_EOF, TK_GREATER, TK_OCT_INT, TK_COMMA, TK_DATE, TK_IDENTIFIER, TK_PERCENT, TK_BANG_EQUAL, TK_GREATER_EQUAL, TK_DEC_FLOAT, TK_PLUS, TK_STRING_LITERAL, TK_DEC_INT, TK_As, TK_SLASH, TK_MINUS, TK_LESS_EQUAL, TK_ASTERISK, TK_Where, TK_LESS, TK_DATE_TIME, TK_False, TK_EQUAL, TK_SEMICOL, TK_Descending, TK_Or, TK_HEX_INT, TK_From, TK_HEX_FLOAT, TK_Ascending, TK_And, TK_LPAR, TK_Not, TK_Group, TK_True, TK_TILDE, TK_RPAR, TK_Having, TK_Order, TK_Limit }))
M_FOLLOW( UNARY_EXPRESSION, ({ TK_EOF, TK_GREATER, TK_OCT_INT, TK_COMMA, TK_DATE, TK_IDENTIFIER, TK_PERCENT, TK_BANG_EQUAL, TK_GREATER_EQUAL, TK_DEC_FLOAT, TK_PLUS, TK_STRING_LITERAL, TK_DEC_INT, TK_As, TK_SLASH, TK_MINUS, TK_LESS_EQUAL, TK_ASTERISK, TK_Where, TK_LESS, TK_DATE_TIME, TK_False, TK_EQUAL, TK_SEMICOL, TK_Descending, TK_Or, TK_HEX_INT, TK_From, TK_HEX_FLOAT, TK_Ascending, TK_And, TK_LPAR, TK_Not, TK_Group, TK_True, TK_TILDE, TK_RPAR, TK_Having, TK_Order, TK_Limit }))
M_FOLLOW( MULTIPLICATIVE_EXPRESSION, ({ TK_EOF, TK_GREATER, TK_OCT_INT, TK_COMMA, TK_DATE, TK_IDENTIFIER, TK_PERCENT, TK_BANG_EQUAL, TK_GREATER_EQUAL, TK_DEC_FLOAT, TK_PLUS, TK_STRING_LITERAL, TK_DEC_INT, TK_As, TK_SLASH, TK_MINUS, TK_LESS_EQUAL, TK_ASTERISK, TK_Where, TK_LESS, TK_DATE_TIME, TK_False, TK_EQUAL, TK_SEMICOL, TK_Descending, TK_Or, TK_HEX_INT, TK_From, TK_HEX_FLOAT, TK_Ascending, TK_And, TK_LPAR, TK_Not, TK_Group, TK_True, TK_TILDE, TK_RPAR, TK_Having, TK_Order, TK_Limit }))
M_FOLLOW( ADDITIVE_EXPRESSION, ({ TK_EOF, TK_GREATER, TK_OCT_INT, TK_COMMA, TK_DATE, TK_IDENTIFIER, TK_BANG_EQUAL, TK_GREATER_EQUAL, TK_DEC_FLOAT, TK_PLUS, TK_STRING_LITERAL, TK_DEC_INT, TK_As, TK_MINUS, TK_LESS_EQUAL, TK_Where, TK_LESS, TK_DATE_TIME, TK_False, TK_EQUAL, TK_SEMICOL, TK_Descending, TK_Or, TK_HEX_INT, TK_From, TK_HEX_FLOAT, TK_Ascending, TK_And, TK_LPAR, TK_Not, TK_Group, TK_True, TK_RPAR, TK_TILDE, TK_Having, TK_Order, TK_Limit }))
M_FOLLOW( COMPARATIVE_EXPRESSION, ({ TK_MINUS, TK_Where, TK_EOF, TK_DATE_TIME, TK_False, TK_SEMICOL, TK_Descending, TK_OCT_INT, TK_Or, TK_HEX_INT, TK_COMMA, TK_From, TK_HEX_FLOAT, TK_Ascending, TK_And, TK_DATE, TK_LPAR, TK_IDENTIFIER, TK_Not, TK_Group, TK_True, TK_RPAR, TK_TILDE, TK_DEC_FLOAT, TK_PLUS, TK_As, TK_Having, TK_STRING_LITERAL, TK_DEC_INT, TK_Order, TK_Limit }))
M_FOLLOW( COMPARISON_OPERATOR, ({ TK_MINUS, TK_EOF, TK_DATE_TIME, TK_False, TK_OCT_INT, TK_HEX_INT, TK_HEX_FLOAT, TK_LPAR, TK_DATE, TK_IDENTIFIER, TK_True, TK_TILDE, TK_DEC_FLOAT, TK_PLUS, TK_STRING_LITERAL, TK_DEC_INT }))
M_FOLLOW( LOGICAL_NOT_EXPRESSION, ({ TK_MINUS, TK_Where, TK_EOF, TK_DATE_TIME, TK_False, TK_SEMICOL, TK_Descending, TK_OCT_INT, TK_Or, TK_HEX_INT, TK_COMMA, TK_From, TK_HEX_FLOAT, TK_Ascending, TK_And, TK_DATE, TK_LPAR, TK_IDENTIFIER, TK_Not, TK_Group, TK_True, TK_RPAR, TK_TILDE, TK_DEC_FLOAT, TK_PLUS, TK_As, TK_Having, TK_STRING_LITERAL, TK_DEC_INT, TK_Order, TK_Limit }))
M_FOLLOW( LOGICAL_AND_EXPRESSION, ({ TK_MINUS, TK_Where, TK_EOF, TK_DATE_TIME, TK_False, TK_SEMICOL, TK_Descending, TK_OCT_INT, TK_Or, TK_HEX_INT, TK_From, TK_COMMA, TK_HEX_FLOAT, TK_Ascending, TK_And, TK_LPAR, TK_DATE, TK_IDENTIFIER, TK_Not, TK_Group, TK_True, TK_TILDE, TK_RPAR, TK_PLUS, TK_DEC_FLOAT, TK_Having, TK_Limit, TK_STRING_LITERAL, TK_DEC_INT, TK_Order, TK_As }))
M_FOLLOW( LOGICAL_OR_EXPRESSION, ({ TK_COMMA, TK_Where, TK_IDENTIFIER, TK_EOF, TK_As, TK_Group, TK_RPAR, TK_SEMICOL, TK_Descending, TK_Having, TK_Or, TK_Limit, TK_Order, TK_From, TK_Ascending }))
M_FOLLOW( EXPRESSION, ({ TK_COMMA, TK_Where, TK_IDENTIFIER, TK_EOF, TK_Group, TK_RPAR, TK_SEMICOL, TK_Descending, TK_Having, TK_Limit, TK_Ascending, TK_Order, TK_From, TK_As }))
M_FOLLOW( DATA_TYPE, ({ TK_Unique, TK_References, TK_Not, TK_Check, TK_Primary, TK_COMMA, TK_EOF, TK_RPAR }))
