/* vim: set filetype=cpp: */

#ifndef DB_OPCODE
#error "define DB_OPCODE(Opcode, __VA_ARGS__) before including this file"
#endif

/*======================================================================================================================
 * Control flow operations
 *====================================================================================================================*/

/* Stop the machine. */
DB_OPCODE(Stop)

/* Stop on condition. */
DB_OPCODE(Stop_Z)
DB_OPCODE(Stop_NZ)
DB_OPCODE(Stop_False)
DB_OPCODE(Stop_True)

/*======================================================================================================================
 * Stack manipulation operations
 *====================================================================================================================*/

DB_OPCODE(Pop)

/*======================================================================================================================
 * Load / Update operations
 *====================================================================================================================*/

/** Load a value from the tuple to the top of the stack. */
DB_OPCODE(Ld_Tup, index)

/** Load a value from the context to the top of the stack. */
DB_OPCODE(Ld_Ctx, index)

/** Update a value in the context with the value on top of the stack. */
DB_OPCODE(Upd_Ctx, index)

/*----- Load from row store ------------------------------------------------------------------------------------------*/

DB_OPCODE(Ld_RS_i8)
DB_OPCODE(Ld_RS_i16)
DB_OPCODE(Ld_RS_i32)
DB_OPCODE(Ld_RS_i64)
DB_OPCODE(Ld_RS_f)
DB_OPCODE(Ld_RS_d)
DB_OPCODE(Ld_RS_s)
DB_OPCODE(Ld_RS_b)

/*----- Store to row store -------------------------------------------------------------------------------------------*/

DB_OPCODE(St_RS_i8)
DB_OPCODE(St_RS_i16)
DB_OPCODE(St_RS_i32)
DB_OPCODE(St_RS_i64)
DB_OPCODE(St_RS_f)
DB_OPCODE(St_RS_d)
DB_OPCODE(St_RS_s)
DB_OPCODE(St_RS_b)

/*----- Load from column store ---------------------------------------------------------------------------------------*/

DB_OPCODE(Ld_CS_i8)
DB_OPCODE(Ld_CS_i16)
DB_OPCODE(Ld_CS_i32)
DB_OPCODE(Ld_CS_i64)
DB_OPCODE(Ld_CS_f)
DB_OPCODE(Ld_CS_d)
DB_OPCODE(Ld_CS_s)
DB_OPCODE(Ld_CS_b)

/*----- Store to column store ----------------------------------------------------------------------------------------*/

DB_OPCODE(St_CS_i8)
DB_OPCODE(St_CS_i16)
DB_OPCODE(St_CS_i32)
DB_OPCODE(St_CS_i64)
DB_OPCODE(St_CS_f)
DB_OPCODE(St_CS_d)
DB_OPCODE(St_CS_s)
DB_OPCODE(St_CS_b)

/*======================================================================================================================
 * Arithmetical operations
 *====================================================================================================================*/

/* Bitwise negation */
DB_OPCODE(Neg_i)

/* Arithmetic negation */
DB_OPCODE(Minus_i)
DB_OPCODE(Minus_f)
DB_OPCODE(Minus_d)

/* Add two values. */
DB_OPCODE(Add_i)
DB_OPCODE(Add_f)
DB_OPCODE(Add_d)

/* Subtract two values. */
DB_OPCODE(Sub_i)
DB_OPCODE(Sub_f)
DB_OPCODE(Sub_d)

/* Multiply two values. */
DB_OPCODE(Mul_i)
DB_OPCODE(Mul_f)
DB_OPCODE(Mul_d)

/* Divide two values. */
DB_OPCODE(Div_i)
DB_OPCODE(Div_f)
DB_OPCODE(Div_d)

/* Modulo divide two values. */
DB_OPCODE(Mod_i)

/* Concatenate two strings. */
DB_OPCODE(Cat_s)

/*======================================================================================================================
 * Logical operations
 *====================================================================================================================*/

/* Logical not */
DB_OPCODE(Not_b)

/* Logical and. */
DB_OPCODE(And_b)

/* Logical or. */
DB_OPCODE(Or_b)

/*======================================================================================================================
 * Comparison operations
 *====================================================================================================================*/

DB_OPCODE(Eq_i)
DB_OPCODE(Eq_f)
DB_OPCODE(Eq_d)
DB_OPCODE(Eq_b)
DB_OPCODE(Eq_s)

DB_OPCODE(NE_i)
DB_OPCODE(NE_f)
DB_OPCODE(NE_d)
DB_OPCODE(NE_b)
DB_OPCODE(NE_s)

DB_OPCODE(LT_i)
DB_OPCODE(LT_f)
DB_OPCODE(LT_d)
DB_OPCODE(LT_s)

DB_OPCODE(GT_i)
DB_OPCODE(GT_f)
DB_OPCODE(GT_d)
DB_OPCODE(GT_s)

DB_OPCODE(LE_i)
DB_OPCODE(LE_f)
DB_OPCODE(LE_d)
DB_OPCODE(LE_s)

DB_OPCODE(GE_i)
DB_OPCODE(GE_f)
DB_OPCODE(GE_d)
DB_OPCODE(GE_s)

DB_OPCODE(Cmp_i)
DB_OPCODE(Cmp_f)
DB_OPCODE(Cmp_d)
DB_OPCODE(Cmp_b)
DB_OPCODE(Cmp_s)

/*======================================================================================================================
 * Intrinsic functions
 *====================================================================================================================*/

DB_OPCODE(Is_Null)

/* Cast to int. */
DB_OPCODE(Cast_i_f)
DB_OPCODE(Cast_i_d)
DB_OPCODE(Cast_i_b)

/* Cast to float. */
DB_OPCODE(Cast_f_i)
DB_OPCODE(Cast_f_d)

/* Cast to double. */
DB_OPCODE(Cast_d_i)
DB_OPCODE(Cast_d_f)
