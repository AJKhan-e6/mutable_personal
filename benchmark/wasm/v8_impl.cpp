#include "v8.hpp"


uint8_t wasm_module[] = {
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x87, 0x80, 0x80, 0x80, 0x00, 0x01, 0x60,
    0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x03, 0x82, 0x80, 0x80, 0x80, 0x00, 0x01, 0x00, 0x04, 0x84, 0x80,
    0x80, 0x80, 0x00, 0x01, 0x70, 0x00, 0x00, 0x05, 0x83, 0x80, 0x80, 0x80, 0x00, 0x01, 0x00, 0x01,
    0x06, 0x81, 0x80, 0x80, 0x80, 0x00, 0x00, 0x07, 0x95, 0x80, 0x80, 0x80, 0x00, 0x02, 0x06, 0x6d,
    0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x08, 0x5f, 0x5a, 0x33, 0x73, 0x75, 0x6d, 0x69, 0x69,
    0x00, 0x00, 0x0a, 0x8d, 0x80, 0x80, 0x80, 0x00, 0x01, 0x87, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20,
    0x01, 0x20, 0x00, 0x6a, 0x0b,
};

std::size_t wasm_module_size = sizeof(wasm_module);

int c_sum(int a, int b) { return a + b; }

struct virtual_sum_impl : virtual_sum
{
    int operator()(int a, int b) override { return a + b; }
};

virtual_sum * virtual_sum::Create() { return new virtual_sum_impl(); }
