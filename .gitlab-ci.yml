# vim: set expandtab tabstop=4 shiftwidth=4:
#-----------------------------------------------------------------------------------------------------------------------
# GENERAL
#-----------------------------------------------------------------------------------------------------------------------

before_script:
    - mkdir -p "${HOME}/.ssh"
    - chmod 700 "${HOME}/.ssh"
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - echo "${SSH_KNOWN_HOSTS}" > "${HOME}/.ssh/known_hosts"
    - chmod 644 "${HOME}/.ssh/known_hosts"


workflow:
    rules:
        - if: $CI_MERGE_REQUEST_IID
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
          when: never # prevent duplicate pipelines of branches with MR


# Define the stages of the pipeline.
stages:
    - check
    - build:debug
    - test:debug
    - build:release
    - test:release
    - report
    - upload

.build_cache:
    cache:
        - key: "third-party"
          paths:
              - "third-party"
              - "build/{debug,release,coverage}/**/*-download"                          # cache CMake download stamps
              - "build/{debug,release,coverage}/**/*-gitclone-lastrun.txt"              # cache CMake Git stamps
              - "build/{debug,release,coverage}/**/*-gitinfo.txt"                       # cache CMake Git stamps
              - "build/{debug,release,coverage}/**/*-configure"                         # cache CMake configure stamps

        - key: "build:${BUILD_TYPE}:${LIBRARY_TYPE}"
          paths:
              - "build/${BUILD_TYPE}/bin"                                               # cache our executables
              - "build/${BUILD_TYPE}/lib/libmutable.{a,so,dylib,dll}"                   # cache our library
              - "build/${BUILD_TYPE}/third-party/src/*-build"                           # cache third-party build
              - "build/${BUILD_TYPE}/src/**/*.o"                                        # cache all object files

.static:
    variables:
        LIBRARY_TYPE: static

.shared:
    variables:
        LIBRARY_TYPE: shared

.debug:
    variables:
        BUILD_TYPE: debug

.release:
    variables:
        BUILD_TYPE: release

.coverage:
    variables:
        BUILD_TYPE: coverage

.upload:
    rules:
        # Do not run if tag was created
        - if: $CI_COMMIT_TAG
          when: never
        # run on default branch
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: on_success


#-----------------------------------------------------------------------------------------------------------------------
# CHECK
#-----------------------------------------------------------------------------------------------------------------------

check:syntax:
    stage: check
    script:
        - echo ${CI_COMMIT_BEFORE_SHA} ${CI_COMMIT_SHA} ${CI_COMMIT_REF_NAME} | hooks/pre-receive


#-----------------------------------------------------------------------------------------------------------------------
# DEBUG BUILD
#-----------------------------------------------------------------------------------------------------------------------

build:debug:linux-amd64:
    stage: build:debug
    tags:
        - linux
        - amd64
    extends:
        - .debug
        - .shared
        - .build_cache
    script:
        - cmake -S . -B build/${BUILD_TYPE}
          --fresh
          -G Ninja
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_SHARED_LIBS=ON
          -DWITH_V8=ON
          -DENABLE_SANITIZERS=ON
          -DENABLE_SANITY_FIELDS=ON
        - cmake --build build/${BUILD_TYPE} --target gitversion all unittest
        - find build/${BUILD_TYPE}/third-party -name '*.so' -exec cp {} build/${BUILD_TYPE}/lib \; # collect shared libraries
        - find build/${BUILD_TYPE}/third-party -name '*.so.*' -exec cp {} build/${BUILD_TYPE}/lib \; # collect shared libraries
    artifacts:
        paths:
            - "build/${BUILD_TYPE}/bin/{lex,parse,check,shell,unittest}"
            - "build/${BUILD_TYPE}/lib/"
        expire_in: 1 day

build:debug:macos-amd64:
    stage: build:debug
    tags:
        - macos
        - amd64
    extends:
        - .debug
        - .shared
        - .build_cache
    script:
        - cmake -S . -B build/${BUILD_TYPE}
          --fresh
          -G Ninja
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_SHARED_LIBS=ON
          -DWITH_V8=ON
          -DENABLE_SANITIZERS=ON
          -DENABLE_SANITY_FIELDS=ON
        - cmake --build build/${BUILD_TYPE} --target gitversion all unittest
        - find build/${BUILD_TYPE}/third-party -name '*.dylib' -exec cp {} build/${BUILD_TYPE}/lib \; # collect shared libraries
        - find build/${BUILD_TYPE}/third-party -name '*.dylib.*' -exec cp {} build/${BUILD_TYPE}/lib \; # collect shared libraries
    artifacts:
        paths:
            - "build/${BUILD_TYPE}/bin/{lex,parse,check,shell,unittest}"
            - "build/${BUILD_TYPE}/lib/"
        expire_in: 1 day


#-----------------------------------------------------------------------------------------------------------------------
# TEST DEBUG
#-----------------------------------------------------------------------------------------------------------------------

unittest:linux-amd64:
    stage: test:debug
    tags:
        - linux
        - amd64
    needs:
        - job: "build:debug:linux-amd64"
          artifacts: true
    script: env UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=detect_stack_use_after_return=1 build/debug/bin/unittest --reporter junit --out unittest-results.xml '[core]'
    artifacts:
        when: always
        paths:
            - unittest-results.xml
        reports:
            junit: unittest-results.xml

unittest:macos-amd64:
    stage: test:debug
    tags:
        - macos
        - amd64
    needs:
        - job: "build:debug:macos-amd64"
          artifacts: true
    script: env UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=detect_stack_use_after_return=1:detect_container_overflow=0 MallocNanoZone=0 build/debug/bin/unittest --reporter junit --out unittest-results.xml '[core]'
    artifacts:
        when: always
        paths:
            - unittest-results.xml
        reports:
            junit: unittest-results.xml

integrationtest:linux-amd64:
    stage: test:debug
    tags:
        - linux
        - amd64
    needs:
        - job: "build:debug:linux-amd64"
          artifacts: true
    script:
        - pip3 install --user --upgrade colorama pyyaml yamale tqdm
        - env UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=detect_stack_use_after_return=1 --unset=TERM python3 test/IntegrationTest.py --verbose --required-only --debug build/debug

integrationtest:macos-amd64:
    stage: test:debug
    tags:
        - macos
        - amd64
    needs:
        - job: "build:debug:macos-amd64"
          artifacts: true
    script:
        - pip3 install --user --upgrade colorama pyyaml yamale tqdm
        - env UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=detect_stack_use_after_return=1:detect_container_overflow=0 MallocNanoZone=0 --unset=TERM python3 test/IntegrationTest.py --verbose --required-only --debug build/debug

ensure-exported-symbols:debug:linux:
    stage: test:debug
    tags:
        - linux
    extends:
        - .debug
        - .shared
    needs:
        - job: "build:debug:linux-amd64"
          artifacts: true
    script:
        - llvm-nm -C build/${BUILD_TYPE}/lib/libmutable.so | awk 'BEGIN{rc=1}; /T m::init\(\)/{rc=0}; END{exit rc}'

ensure-exported-symbols:debug:macos:
    stage: test:debug
    tags:
        - macos
    extends:
        - .debug
        - .shared
    needs:
        - job: "build:debug:macos-amd64"
          artifacts: true
    script:
        - llvm-nm -C build/${BUILD_TYPE}/lib/libmutable.dylib | awk 'BEGIN{rc=1}; /T m::init\(\)/{rc=0}; END{exit rc}'


#-----------------------------------------------------------------------------------------------------------------------
# RELEASE BUILD
#-----------------------------------------------------------------------------------------------------------------------

build:release:linux-amd64:
    stage: build:release
    tags:
        - linux
        - amd64
    extends:
        - .release
        - .static
        - .build_cache
    script:
        - cmake -S . -B build/${BUILD_TYPE}
          --fresh
          -G Ninja
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=OFF
          -DWITH_V8=ON
          -DENABLE_SANITIZERS=OFF
          -DENABLE_SANITY_FIELDS=OFF
        - cmake --build build/${BUILD_TYPE} --target gitversion all
        - mkdir mutable
        - cp -R include mutable
        - mkdir mutable/lib
        - cp build/${BUILD_TYPE}/lib/libmutable_bundled.a mutable/lib
    artifacts:
        paths:
            - "mutable"
        expire_in: 1 day
    rules:
        # run on default branch
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: on_success
        # run on branches with `release` in their name
        - if: $CI_COMMIT_BRANCH =~ /release/i
          when: on_success
        # never run on merge requests in WIP/Draft mode
        - if: $CI_MERGE_REQUEST_TITLE == null || ($CI_MERGE_REQUEST_TITLE =~ /^wip:/i || $CI_MERGE_REQUEST_TITLE =~ /^draft:/i)
          when: never
        # run on other merge requests (i.e. not marked as WIP/Draft)
        - if: $CI_MERGE_REQUEST_TITLE
          when: on_success

build:release:macos-amd64:
    stage: build:release
    tags:
        - macos
        - amd64
    extends:
        - .release
        - .static
        - .build_cache
    script:
        - cmake -S . -B build/${BUILD_TYPE}
          --fresh
          -G Ninja
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=OFF
          -DWITH_V8=ON
          -DENABLE_SANITIZERS=OFF
          -DENABLE_SANITY_FIELDS=OFF
        - cmake --build build/${BUILD_TYPE} --target gitversion all
        - mkdir mutable
        - cp -R include mutable
        - mkdir mutable/lib
        - cp build/${BUILD_TYPE}/lib/libmutable_bundled.a mutable/lib
    artifacts:
        paths:
            - "mutable"
        expire_in: 1 day
    rules:
        # run on default branch
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: on_success
        # run on branches with `release` in their name
        - if: $CI_COMMIT_BRANCH =~ /release/i
          when: on_success
        # never run on merge requests in WIP/Draft mode
        - if: $CI_MERGE_REQUEST_TITLE == null || ($CI_MERGE_REQUEST_TITLE =~ /^wip:/i || $CI_MERGE_REQUEST_TITLE =~ /^draft:/i)
          when: never
        # run on other merge requests (i.e. not marked as WIP/Draft)
        - if: $CI_MERGE_REQUEST_TITLE
          when: on_success


#-----------------------------------------------------------------------------------------------------------------------
# TEST RELEASE
#-----------------------------------------------------------------------------------------------------------------------

ensure-exported-symbols:release:linux:
    stage: test:release
    tags:
        - linux
    extends:
        - .release
        - .static
    needs:
        - job: "build:release:linux-amd64"
          artifacts: true
    script:
        - llvm-nm -C mutable/lib/libmutable_bundled.a | awk 'BEGIN{rc=1}; /T m::init\(\)/{rc=0}; END{exit rc}'
        - llvm-nm -C mutable/lib/libmutable_bundled.a | awk 'BEGIN{rc=1}; /T v8::V8::Initialize\(int\)/{rc=0}; END{exit rc}'
        - llvm-nm -C mutable/lib/libmutable_bundled.a | awk 'BEGIN{rc=1}; /T wasm::IString::interned\(/{rc=0}; END{exit rc}'

ensure-exported-symbols:release:macos:
    stage: test:release
    tags:
        - macos
    extends:
        - .release
        - .static
    needs:
        - job: "build:release:macos-amd64"
          artifacts: true
    script:
        - llvm-nm -C mutable/lib/libmutable_bundled.a | awk 'BEGIN{rc=1}; /T m::init\(\)/{rc=0}; END{exit rc}'
        - llvm-nm -C mutable/lib/libmutable_bundled.a | awk 'BEGIN{rc=1}; /T v8::V8::Initialize\(/{rc=0}; END{exit rc}'
        - llvm-nm -C mutable/lib/libmutable_bundled.a | awk 'BEGIN{rc=1}; /T wasm::IString::interned\(/{rc=0}; END{exit rc}'

#-----------------------------------------------------------------------------------------------------------------------
# REPORT
#-----------------------------------------------------------------------------------------------------------------------

report:doxygen:
    stage: report
    tags:
        - nginx
    script:
        - doxygen Doxyfile
        - rm -rf /srv/http/mutable/doxy
        - mkdir -p /srv/http/mutable/doxy
        - mv doxy/html/* /srv/http/mutable/doxy
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

report:doxygen:api:
    stage: report
    tags:
        - nginx
    script:
        - doxygen Doxyfile-api
    artifacts:
        paths:
            - "doxy-api/html"
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

report:coverage:
    stage: report
    tags:
        - nginx
    needs: [ "build:debug:linux-amd64" ]
    script:
        - ./coverage.sh
        - rm -rf /srv/http/mutable/coverage
        - mv build/${BUILD_TYPE}/html /srv/http/mutable/coverage
    coverage: '/lines\.+: \d+\.\d+/'
    extends:
        - .coverage
        - .shared
        - .build_cache
    artifacts:
        paths:
            - "build/${BUILD_TYPE}/catch.xml"
        reports:
            junit: "build/${BUILD_TYPE}/catch.xml"
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: on_success
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /coverage/i
          when: on_success

#-----------------------------------------------------------------------------------------------------------------------
# UPLOAD GENERIC PACKAGE & CREATE GITLAB RELEASE
#-----------------------------------------------------------------------------------------------------------------------

upload:tag-version:
    stage: upload
    extends:
        - .upload
    script:
        # Find the latest version tag in the git log (ignore failure since we handle it inside this script)
        - latest_version_tag=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null) || true
        # If no version tags are found, start with v0.0.0
        # Else get the version number from the latest version tag
        - |
            if [ -z "$latest_version_tag" ]; then
                latest_version="0.0.0"
            else
                latest_version=$(echo "$latest_version_tag" | tail -c +2)
            fi
        - echo "New version tag is ${new_version}"
        - |
         if git tag --points-at HEAD | grep -q "v[0-9]\+\.[0-9]\+\.[0-9]\+"; then
             echo "Latest commit already has a version tag '$latest_version_tag'"
             echo "TAG=${latest_version_tag}" >> variables.env
         else
             echo "Bump patch number"
             patch=$(echo "$latest_version" | awk -F. '{print $3}')
             ((new_patch = patch + 1))
             new_version=$(printf "v%s.%s.%s" "$(echo "$latest_version" | head -c 1)" "$(echo "$latest_version" | cut -d "." -f 2)" "$new_patch")
             echo "TAG=${new_version}" >> variables.env
             echo "Push new tag '$new_version' to git."
             curl --fail --header "PRIVATE-TOKEN: ${ADD_RELEASES_TOKEN}" --request POST "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/tags?tag_name=${new_version}&ref=${CI_COMMIT_SHA}"
         fi
    artifacts:
        reports:
            dotenv: variables.env


upload:package:linux-amd64:
    stage: upload
    extends:
        - .upload
    tags:
        - linux
        - amd64
    needs:
        - job: build:release:linux-amd64
          artifacts: true
        - job: upload:tag-version
          artifacts: true
    script:
        - cd mutable
        - zip -r mutable.zip *
        - >
          curl --fail --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file mutable.zip
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mutable/${TAG}/mutable-linux-amd64-${TAG}.zip"


upload:package:macos-amd64:
    stage: upload
    extends:
        - .upload
    tags:
        - macos
        - amd64
    needs:
        - job: build:release:macos-amd64
          artifacts: true
        - job: upload:tag-version
          artifacts: true
    script:
        - cd mutable
        - zip -r mutable.zip *
        - >
          curl --fail --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file mutable.zip
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mutable/${TAG}/mutable-macos-amd64-${TAG}.zip"


upload:release:
    stage: upload
    extends:
        - .upload
    needs:
        - job: upload:package:linux-amd64
        - job: upload:package:macos-amd64
        - job: upload:tag-version
          artifacts: true
    script:
        # Create Release on GitLab
        - >
          curl -v --fail --header "Content-Type: application/json"
          --header "PRIVATE-TOKEN: ${ADD_RELEASES_TOKEN}"
          --data "{ \"name\": \"Mutable Release ${TAG}\", \"tag_name\": \"${TAG}\",
          \"assets\": { \"links\": [
          { \"name\": \"mutable linux-amd64\",
          \"url\": \"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mutable/${TAG}/mutable-linux-amd64-${TAG}.zip\",
          \"link_type\": \"package\" },
          { \"name\": \"mutable macos-amd64\",
          \"url\": \"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mutable/${TAG}/mutable-macos-amd64-${TAG}.zip\",
          \"link_type\": \"package\" } ] } }"
          --request POST "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases"