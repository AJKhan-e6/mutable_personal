#-----------------------------------------------------------------------------------------------------------------------
# GENERAL
#-----------------------------------------------------------------------------------------------------------------------

# Define the stages of the pipeline.
stages:
    - check
    - build
    - test
    - report


#-----------------------------------------------------------------------------------------------------------------------
# CHECK
#-----------------------------------------------------------------------------------------------------------------------

check:syntax:
    stage: check
    script:
        - echo ${CI_COMMIT_BEFORE_SHA} ${CI_COMMIT_SHA} ${CI_COMMIT_REF_NAME} | hooks/pre-receive


#-----------------------------------------------------------------------------------------------------------------------
# BUILD
#-----------------------------------------------------------------------------------------------------------------------

build:linux-amd64:
    stage: build
    tags:
        - linux
        - amd64
    script:
        - mkdir -p build/debug
        - cd build/debug
        - CC=clang CXX=clang++ cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ../..
        - ninja
    artifacts:
        paths:
            - "build/debug/bin/"
        expire_in: 1 day


#-----------------------------------------------------------------------------------------------------------------------
# TEST
#-----------------------------------------------------------------------------------------------------------------------

unittest:linux-amd64:
    stage: test
    tags:
        - linux
        - amd64
    needs:
        - job: "build:linux-amd64"
          artifacts: true
    script: build/debug/bin/unittest \[core\]

integrationtest:linux-amd64:
    stage: test
    tags:
        - linux
        - amd64
    needs:
        - job: "build:linux-amd64"
          artifacts: true
    script:
        - pip3 install --user --upgrade colorama pyyaml yamale tqdm
        - python3 test/IntegrationTest.py -v


#-----------------------------------------------------------------------------------------------------------------------
# REPORT
#-----------------------------------------------------------------------------------------------------------------------

report:doxygen:
    stage: report
    tags:
        - nginx
    script:
        - doxygen Doxyfile
        - rm -rf /usr/share/nginx/html/mutable/doxy
        - mkdir -p /usr/share/nginx/html/mutable/doxy
        - mv doxy/html/* /usr/share/nginx/html/mutable/doxy
    only:
        - master

report:coverage:
    stage: report
    tags:
        - nginx
    needs: [ "build:linux-amd64" ]
    script:
        - mkdir -p build/debug
        - cd build/debug
        - CC=clang CXX=clang++ cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=--coverage ../..
        - ninja
        - bin/unittest --reporter junit --out catch.xml \[core\]
        - echo -e '#!/bin/bash\nllvm-cov gcov "$@"' > gcov.sh
        - chmod a+x gcov.sh
        - lcov --directory src --gcov-tool ./gcov.sh --rc lcov_branch_coverage=1 --capture --output-file cov.info
        - rm -rf /usr/share/nginx/html/mutable/coverage
        - mkdir -p /usr/share/nginx/html/mutable/coverage
        - genhtml --branch-coverage cov.info -o /usr/share/nginx/html/mutable/coverage
    coverage: '/branches\.\.\.: \d+\.\d+/'
    artifacts:
        paths:
            - "build/debug/catch.xml"
        reports:
            junit: "build/debug/catch.xml"
    only:
        - master
