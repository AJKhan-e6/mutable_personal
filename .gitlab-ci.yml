# vim: set expandtab tabstop=4 shiftwidth=4:
#-----------------------------------------------------------------------------------------------------------------------
# GENERAL
#-----------------------------------------------------------------------------------------------------------------------

before_script:
    - mkdir -p "${HOME}/.ssh"
    - chmod 700 "${HOME}/.ssh"
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - echo "${SSH_KNOWN_HOSTS}" > "${HOME}/.ssh/known_hosts"
    - chmod 644 "${HOME}/.ssh/known_hosts"


workflow:
    rules:
        - if: $CI_MERGE_REQUEST_IID
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
          when: never # prevent duplicate pipelines of branches with MR


# Define the stages of the pipeline.
stages:
    - check
    - build:debug
    - test
    - build:release
    - report

.build_cache:
    cache:
        - key: "third-party"
          paths:
              - "third-party"
              - "build/{debug,release,coverage}/**/*-download"                          # cache CMake download stamps
              - "build/{debug,release,coverage}/**/*-gitclone-lastrun.txt"              # cache CMake Git stamps
              - "build/{debug,release,coverage}/**/*-gitinfo.txt"                       # cache CMake Git stamps
              - "build/{debug,release,coverage}/**/*-configure"                         # cache CMake configure stamps

        - key: "build:${BUILD_TYPE}:${LIBRARY_TYPE}"
          paths:
              - "build/${BUILD_TYPE}/bin"                                               # cache our executables
              - "build/${BUILD_TYPE}/lib/libmutable.{a,so,dylib,dll}"                   # cache our library
              - "build/${BUILD_TYPE}/third-party/src/*-build"                           # cache third-party build
              - "build/${BUILD_TYPE}/src/**/*.o"                                        # cache all object files

.static:
    variables:
        LIBRARY_TYPE: static

.shared:
    variables:
        LIBRARY_TYPE: shared

.debug:
    variables:
        BUILD_TYPE: debug

.release:
    variables:
        BUILD_TYPE: release

.coverage:
    variables:
        BUILD_TYPE: coverage


#-----------------------------------------------------------------------------------------------------------------------
# CHECK
#-----------------------------------------------------------------------------------------------------------------------

check:syntax:
    stage: check
    script:
        - echo ${CI_COMMIT_BEFORE_SHA} ${CI_COMMIT_SHA} ${CI_COMMIT_REF_NAME} | hooks/pre-receive


#-----------------------------------------------------------------------------------------------------------------------
# DEBUG BUILD
#-----------------------------------------------------------------------------------------------------------------------

build:debug:linux-amd64:
    stage: build:debug
    tags:
        - linux
        - amd64
    extends:
        - .debug
        - .shared
        - .build_cache
    script:
        - mkdir -p build/${BUILD_TYPE}
        - cd build/${BUILD_TYPE}
        - cmake -G Ninja
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_SHARED_LIBS=On
          -DWITH_V8=On
          -DENABLE_SANITIZERS=On
          -DENABLE_SANITY_FIELDS=On
          ../..
        - ninja gitversion
        - ninja all unittest
        - find third-party -name '*.so' -exec cp {} lib \;     # collect shared libraries
    artifacts:
        paths:
            - "build/${BUILD_TYPE}/bin/"
            - "build/${BUILD_TYPE}/lib/"
        expire_in: 1 day

build:debug:macos-amd64:
    stage: build:debug
    tags:
        - macos
        - amd64
    extends:
        - .debug
        - .shared
        - .build_cache
    script:
        - mkdir -p build/${BUILD_TYPE}
        - cd build/${BUILD_TYPE}
        - cmake -G Ninja
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_SHARED_LIBS=On
          -DWITH_V8=On
          -DENABLE_SANITIZERS=On
          -DENABLE_SANITY_FIELDS=On
          ../..
        - ninja gitversion
        - ninja all unittest
        - find third-party -name '*.dylib' -exec cp {} lib \;  # collect shared libraries
    artifacts:
        paths:
            - "build/${BUILD_TYPE}/bin/"
            - "build/${BUILD_TYPE}/lib/"
        expire_in: 1 day


#-----------------------------------------------------------------------------------------------------------------------
# TEST
#-----------------------------------------------------------------------------------------------------------------------

unittest:linux-amd64:
    stage: test
    tags:
        - linux
        - amd64
    needs:
        - job: "build:debug:linux-amd64"
          artifacts: true
    script: env UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=detect_stack_use_after_return=1 build/debug/bin/unittest --reporter junit --out unittest-results.xml '[core]'
    artifacts:
        when: always
        paths:
            - unittest-results.xml
        reports:
            junit: unittest-results.xml

unittest:macos-amd64:
    stage: test
    tags:
        - macos
        - amd64
    needs:
        - job: "build:debug:macos-amd64"
          artifacts: true
    script: env UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=detect_stack_use_after_return=1:detect_container_overflow=0 MallocNanoZone=0 build/debug/bin/unittest --reporter junit --out unittest-results.xml '[core]'
    artifacts:
        when: always
        paths:
            - unittest-results.xml
        reports:
            junit: unittest-results.xml

integrationtest:linux-amd64:
    stage: test
    tags:
        - linux
        - amd64
    needs:
        - job: "build:debug:linux-amd64"
          artifacts: true
    script:
        - pip3 install --user --upgrade colorama pyyaml yamale tqdm
        - env UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=detect_stack_use_after_return=1 --unset=TERM python3 test/IntegrationTest.py --verbose --required-only --debug build/debug

integrationtest:macos-amd64:
    stage: test
    tags:
        - macos
        - amd64
    needs:
        - job: "build:debug:macos-amd64"
          artifacts: true
    script:
        - pip3 install --user --upgrade colorama pyyaml yamale tqdm
        - env UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=detect_stack_use_after_return=1:detect_container_overflow=0 MallocNanoZone=0 --unset=TERM python3 test/IntegrationTest.py --verbose --required-only --debug build/debug


#-----------------------------------------------------------------------------------------------------------------------
# RELEASE BUILD
#-----------------------------------------------------------------------------------------------------------------------

build:release:linux-amd64:
    stage: build:release
    tags:
        - linux
        - amd64
    extends:
        - .release
        - .static
        - .build_cache
    script:
        - mkdir -p build/${BUILD_TYPE}
        - cd build/${BUILD_TYPE}
        - cmake -G Ninja
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=Off
          -DWITH_V8=On
          -DENABLE_SANITIZERS=Off
          -DENABLE_SANITY_FIELDS=Off
          ../..
        - ninja gitversion
        - ninja
        - cd ../..
        - mkdir mutable
        - cp -R include mutable
        - mkdir mutable/lib
        - cp build/${BUILD_TYPE}/lib/libmutable.a mutable/lib
    artifacts:
        paths:
            - "mutable"
        expire_in: 1 day
    rules:
        # run on default branch
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: on_success
        # run on branches with `release` in their name
        - if: $CI_COMMIT_BRANCH =~ /release/i
          when: on_success
        # never run on merge requests in WIP/Draft mode
        - if: $CI_MERGE_REQUEST_TITLE == null || ($CI_MERGE_REQUEST_TITLE =~ /^wip:/i || $CI_MERGE_REQUEST_TITLE =~ /^draft:/i)
          when: never
        # run on other merge requests (i.e. not marked as WIP/Draft)
        - if: $CI_MERGE_REQUEST_TITLE
          when: on_success

build:release:macos-amd64:
    stage: build:release
    tags:
        - macos
        - amd64
    extends:
        - .release
        - .static
        - .build_cache
    script:
        - mkdir -p build/${BUILD_TYPE}
        - cd build/${BUILD_TYPE}
        - cmake -G Ninja
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=Off
          -DWITH_V8=On
          -DENABLE_SANITIZERS=Off
          -DENABLE_SANITY_FIELDS=Off
          ../..
        - ninja gitversion
        - ninja
        - cd ../..
        - mkdir mutable
        - cp -R include mutable
        - mkdir mutable/lib
        - cp build/${BUILD_TYPE}/lib/libmutable.a mutable/lib
    artifacts:
        paths:
            - "mutable"
        expire_in: 1 day
    rules:
        # run on default branch
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: on_success
        # run on branches with `release` in their name
        - if: $CI_COMMIT_BRANCH =~ /release/i
          when: on_success
        # never run on merge requests in WIP/Draft mode
        - if: $CI_MERGE_REQUEST_TITLE == null || ($CI_MERGE_REQUEST_TITLE =~ /^wip:/i || $CI_MERGE_REQUEST_TITLE =~ /^draft:/i)
          when: never
        # run on other merge requests (i.e. not marked as WIP/Draft)
        - if: $CI_MERGE_REQUEST_TITLE
          when: on_success


#-----------------------------------------------------------------------------------------------------------------------
# REPORT
#-----------------------------------------------------------------------------------------------------------------------

report:doxygen:
    stage: report
    tags:
        - nginx
    script:
        - doxygen Doxyfile
        - rm -rf /srv/http/mutable/doxy
        - mkdir -p /srv/http/mutable/doxy
        - mv doxy/html/* /srv/http/mutable/doxy
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

report:doxygen:api:
    stage: report
    tags:
        - nginx
    script:
        - doxygen Doxyfile-api
    artifacts:
        paths:
            - "doxy-api/html"
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

report:coverage:
    stage: report
    tags:
        - nginx
    needs: [ "build:debug:linux-amd64" ]
    script:
        - ./coverage.sh
        - rm -rf /srv/http/mutable/coverage
        - mv build/${BUILD_TYPE}/html /srv/http/mutable/coverage
    coverage: '/lines\.+: \d+\.\d+/'
    extends:
        - .coverage
        - .shared
        - .build_cache
    artifacts:
        paths:
            - "build/${BUILD_TYPE}/catch.xml"
        reports:
            junit: "build/${BUILD_TYPE}/catch.xml"
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: on_success
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /coverage/i
          when: on_success
